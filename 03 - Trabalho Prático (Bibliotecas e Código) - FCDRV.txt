1) Bibliotecas usadas:


As bibliotecas usadas neste código são:

google.colab: utilizada para montar o Google Drive no ambiente Colab.
pandas: utilizada para trabalhar com a base de dados em formato de tabela.
matplotlib.pyplot: utilizada para criar gráficos e visualizações.
babel.numbers: utilizada para converter valores numéricos em formato de moeda.



2) Código Python (Google Colab): 

#@title 1) Montando o Google Drive

from google.colab import drive
drive.mount('/content/drive')



#@title 2) Importando bibliotecas e declarando variáveis

#importando as bibliotecas usadas
import pandas as pd
import matplotlib.pyplot as plt

# Após baixar os dados do site, crie outra aba, digite "1" copie essa célula, na primeira aba, selecione somente os números (sem as primeiras coluna e linha) e clique com o botão direito
# e depois clique em "Colar Especial" e selecione a opção de "Divisão" na parte de "Operação" 
# Isso tem como objetivo em transformar os dados em números e preencher os espaços vazios com 0

# Em alguns casos o código ainda apresenta uns erros de concatenação de string, 
# ai é necessário trabalhar na base do excel convertendo os tipo GERAL para NUMERICO e ainda fazer ajustes de padrão Americano e Brasileiro de , e .

#Importando a base de dados
DadosP = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/XPE_FCDRV_01_Trabalho_Pratico/Dados/02_Limpo/Basedados.xlsx")

#Declarando as variaveis que iremos utilizar
Ativo = DadosP["TICKER"]
Preco = DadosP["PRECO"]
Liqui = DadosP[" LIQUIDEZ MEDIA DIARIA"]
DY = DadosP["DY"]
PL = DadosP["P/L"]

#Exibindo parte dos dados
print(DadosP.head())



#@title Atividade 1: Ativo com maior preço

#Armazena em uma varivel p a posiçao do maior valor da coluna de Precos
p = Preco.index[Preco == max(Preco)][0]

#Faz o print do nome do ativo e o valor do ativo
print("Ativo mais caro: " + Ativo[p] + " Preço: R$" + str(max(Preco)) + "\n")



#@title Atividade 2: Os 10 maiores e menores preços

#Ordena a coluna de Precos na ordem crescente e armazena na variavel PreSort
PreSort=Preco.sort_values()
print("Os 10 maiores Preços: \n")
#Pega os 10 ultimos valores da coluna reorganizada
print(PreSort[-10:])

#Ordena a coluna de Precos na ordem decrescente e armazena na variavel PreSort
PreSort=Preco.sort_values(ascending=False)
print("Os 10 menores Preços: \n")
#Pega os 10 ultimos valores da coluna reorganizada
print(PreSort[-10:])


#@title Pré Atividade 3: Vendo os dados da coluna Liquidez media diária

print(Liqui)



#@title Ativade 3: Soma e Média da Liquidez Media Diaria

#Soma a Liquidez de todos os ativos e armazena na variavel SLi
SLi=Liqui.sum()
print("Soma da Liquidez: "+ str(SLi) + "\n")
#Calcula a Média da Liquidez de todos os ativos e armazena na variavel MLi
MLi=Liqui.mean()
print("Média da Liquidez: " + str(MLi) + "\n")


# Instalando a biblioteca BABEL
pip install babel


# Testando a instalação da biblioteca BABEL convertendo um numero simples (1234.56)
from babel.numbers import format_currency

valor = 1234.56
print(format_currency(valor, 'BRL', locale='pt_BR'))


#Refazendo o código da atividade 3 agora convertendo para REAL a resposta utilizando a biblioteca BABEL
from babel.numbers import format_currency

# Soma a Liquidez de todos os ativos e armazena na variavel SLi
SLi = Liqui.sum()
print("Soma da Liquidez: " + format_currency(SLi, 'BRL', locale='pt_BR') + "\n")

# Calcula a Média da Liquidez de todos os ativos e armazena na variavel MLi
MLi = Liqui.mean()
print("Média da Liquidez: " + format_currency(MLi, 'BRL', locale='pt_BR') + "\n")



#@title Atividade 4: Ativos com P/L maiores que 0 escrevendo o nome deles

print("Ativos com P/L maiores que 0: \n")
#Percorre todos os dados da coluna de P/L
for valor in PL:
  #Verifica se o PL é maior que 0 
  if valor > 0:
    #Se sim a posicao desse ativo é armazenada na variavel p
    p = PL.index[PL == valor][0]
    #Imprime na tela o nome do Ativo jogando a posição na coluna do TICKER
    print(Ativo[p])
print("\n")





#@title Atividade 5: Retirando os DY diferentes de 0 e escrevendo o nome deles

print("Retirando os DY diferentes de 0: \n")
#Percorre todos os dados da coluna de DY
for valor in DY:
  #Verifica se ele é diferente de 0
  if valor != 0:
    #Se sim a posicao desse ativo é armazenada na variavel posicao
    p = DY.index[DY == valor][0]
    #Imprime na tela o nome do Ativo jogando a posição na coluna do TICKER
    print(Ativo[p])
print("\n")



#@title Atividade 6: Liste as Ações do tipo preferenciais PN (Código 4) e jogue a sáida para um arquivo .txt

caractere = '4'
#Joga na variavel Ativos4 todos os ativos terminados com a número 4
Ativos4 = Ativo[Ativo.str.endswith(caractere)]
#Cria um programa txt com o argumento 'w' que faz com que o programa escreva por cima do que estava escrito no texto
with open('Ativos4.txt', 'w') as arquivo:
  #Usa a função to_String para converter a varivel Ativos4 para String e ser escrita no arquivo .txt 
  arquivo.write(Ativos4.to_string(index=False) + '\n')
#Fecha o arquivo txt para gravar as alteraçoes feitas
arquivo.close
print("Ativos preferenciais (PN) escritos no arquivo texto \n")





#@title Atividade 7: Liste as 10 ações com maior Liquidez Media Diaria e mostre o resultado em um gráfico

#Pega as posicoes dos top 10 valores de Liquidez Media Diaria, compara com a posiçao na coluna Ticker 
top10 = DadosP.loc[DadosP[" LIQUIDEZ MEDIA DIARIA"].nlargest(10).index]["TICKER"]
#Tranforma essa variavel top 10 em uma Lista
ListaT = top10.tolist()
#Cria a Variavel ListaL
ListaL = []
#Cria a Variavel de controle i
i=0
#Percorre a ListaT
for x in ListaT:
  #Pega a posição do Ticker e armzena em uma varivel p
  p = Ativo.index[Ativo == x][0]
  #Insere na ListaL o valor da Liquidez do ativo na posição da ListaL i
  ListaL.insert(i,Liqui[p])
  #Soma mais 1 em i
  i+=1
#Define o tamnho do gráfico de 10 polegadas de largura por 8 polegadas de altura
plt.figure(figsize=(10, 8))
#Plota um gráfico de colunas usando as listas ListaT e ListaL, onde ListaT é a lista de ativos e ListaL é a lista de valores de liquidez.
plt.bar(ListaT,ListaL)
#Adiciona rótulos aos eixos x e y do gráfico.
plt.xlabel('Ativos')
plt.ylabel('Valores de Liquidez')
#Adiciona um título ao gráfico.
plt.title('Gráfico de Colunas')
#Define o estilo de formatação dos rótulos dos eixos y para o estilo "plain" (sem notação científica).
plt.ticklabel_format(axis='y', style='plain')
# Mostrar o gráfico
plt.show()




